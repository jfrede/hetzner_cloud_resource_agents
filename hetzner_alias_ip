#!/bin/sh
#
#
#    Manage Secondary Private IP with Pacemaker
#
#
# Copyright 2021 Joerg Frede <frede@b1-systems.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

#
#  Prerequisites:
#
#  - preconfigured hcloud (registerd api Key)
#  - Hetzner Cloud role with the following permissions:
#    * read
#    * write
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

#set -x

#
# Defaults
#
OCF_RESKEY_hcbin_default="/usr/local/bin/hcloud"
OCF_RESKEY_api_delay_default="1"

: ${OCF_RESKEY_hcbin=${OCF_RESKEY_hcbin_default}}
: ${OCF_RESKEY_api_delay=${OCF_RESKEY_api_delay_default}}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="hetzner_alias_ip">
<version>1.0</version>

<longdesc lang="en">
Resource Agent for Hetzner Cloud Alias IP Addresses.

It manages Hetzner Cloud Alias Addresses with hcloud.

Credentials needs to be setup by running "hcloud context create [project]".

See https://github.com/hetznercloud/cli for more information about hcloud.
</longdesc>
<shortdesc lang="en">Hetzner Cloud Alias IP Address Resource Agent</shortdesc>

<parameters>

<parameter name="hcbin" unique="0">
<longdesc lang="en">
Path to hcloud binary
</longdesc>
<shortdesc lang="en">hcloud binary</shortdesc>
<content type="string" default="${OCF_RESKEY_hcbin_default}" />
</parameter>

<parameter name="network">
<longdesc lang="en">
Network Name from hcloud network list
</longdesc>
<shortdesc lang="en">network name</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="alias_ip" unique="1" required="1">
<longdesc lang="en">
The IP Adress that will be aliased to a host on an internal Network
</longdesc>
<shortdesc lang="en">Alias ip in the specified network</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="api_delay" unique="0">
<longdesc lang="en">
a short delay between API calls, to avoid sending API too quick
</longdesc>
<shortdesc lang="en">a short delay between API calls</shortdesc>
<content type="integer" default="${OCF_RESKEY_api_delay_default}" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="60s" />
<action name="stop"         timeout="30s" />
<action name="monitor"      timeout="30s" interval="600s" depth="0" />
<action name="migrate_to"   timeout="60s" />
<action name="migrate_from" timeout="30s" />
<action name="meta-data"    timeout="5s" />
<action name="validate-all" timeout="10s" />
</actions>
</resource-agent>
END
}

#######################################################################

hcalias_usage() {
    cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

hcalias_start() {
    hcalias_monitor && return $OCF_SUCCESS

    NEW_ALIAS_IPS=$(echo "$ALIAS_IP,$ALIAS_IPS" | tr "\n" "," | tr -s ",")

    $HCBIN server change-alias-ips -n "$NETWORK" --alias-ips ${NEW_ALIAS_IPS%?} $(hostname -f)
    RET=$?

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay}

    if [ $RET -ne 0 ]; then
        try_recover_ip $ALIAS_IP

        $HCBIN server change-alias-ips -n "$NETWORK" --alias-ips ${NEW_ALIAS_IPS%?} $(hostname -f)
        RET=$?

        if [ $RET -ne 0 ]; then
            return $OCF_ERR_GENERIC
        fi
    fi

    ocf_log info "alias_ip has been successfully brought up (${ALIAS_IP})"
    return $OCF_SUCCESS
}

hcalias_stop() {
    hcalias_monitor || return $OCF_SUCCESS

    NEW_ALIAS_IPS=$(echo "$ALIAS_IPS" | grep -v "$ALIAS_IP" | tr "\n" "," | tr -s ",")
    if [ -z ${NEW_ALIAS_IPS%?} ]; then
        $HCBIN server change-alias-ips -n "$NETWORK" --clear $(hostname -f)
        RET=$?
        # delay to avoid sending request too fast
        sleep ${OCF_RESKEY_api_delay}
    else
        $HCBIN server change-alias-ips -n "$NETWORK" --alias-ips ${NEW_ALIAS_IPS%?} $(hostname -f)
        RET=$?
        # delay to avoid sending request too fast
        sleep ${OCF_RESKEY_api_delay}
    fi

    if [ $RET -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi

    ocf_log info "alias_ip has been successfully brought down (${ALIAS_IP})"
    return $OCF_SUCCESS
}

hcalias_monitor() {
    ALIAS_IP_NET=$(echo "$ALIAS_IP" | cut -d "." -f 1-3)

    ALIAS_IPS=$($HCBIN server describe $(hostname -f) | grep -A 5 "Alias IPs" | grep -v "IP:"  | tr -d "\- \t" | grep "$ALIAS_IP_NET")

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay}

    echo "$ALIAS_IPS" | grep -q "${ALIAS_IP}"
    RET=$?

    if [ $RET -ne 0 ]; then
          return $OCF_NOT_RUNNING
    fi
    return $OCF_SUCCESS
}

hcalias_validate() {
    check_binary ${HCBIN}

    if [ -z "$NETWORK" ]; then
        ocf_exit_reason "network parameter not set"
        return $OCF_ERR_CONFIGURED
    fi

    IP_RANGE=$($HCBIN network list | grep $NETWORK | tr -s " " | cut -d " " -f 3 | cut -d "." -f 1-3)
    RET=$?

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay} 

    if [ $RET -ne 0 ]; then
        ocf_exit_reason "network not found of hcloud not configured"
        return $OCF_ERR_CONFIGURED
    fi

    if [ -z "$ALIAS_IP" ]; then
        ocf_exit_reason "alias_ip parameter not set"
        return $OCF_ERR_CONFIGURED
    fi

    ALIAS_IP_NET=$(echo "$ALIAS_IP" | cut -d "." -f 1-3)
    if [ "$IP_RANGE" != "$ALIAS_IP_NET" ]; then
        ocf_exit_reason "alias_ip does not match network"
        return $OCF_ERR_CONFIGURED
    fi 

    return $OCF_SUCCESS
}

try_recover_ip() {
    NODES=$(pcs config | grep -A1 "Pacemaker Nodes" | grep -v  "Pacemaker Nodes")

    for NODE in $NODES ; do

        ALIAS_IPS_NODE=$($HCBIN server describe $NODE | grep -A 5 "Alias IPs" | grep -v "IP:" | tr -d "\- \t" | grep "$ALIAS_IP_NET")

        # delay to avoid sending request too fast
        sleep ${OCF_RESKEY_api_delay}

        echo "$ALIAS_IPS_NODE" | grep -q "${ALIAS_IP}"
        RET=$?

        if [ $RET -ne 0 ]; then
            continue
        else
            NEW_ALIAS_IPS_NODE=$(echo "$ALIAS_IPS_NODE" | grep -v "$ALIAS_IP" | tr "\n" ",")
            if [ -z ${NEW_ALIAS_IPS_NODE%?} ]; then
                $HCBIN server change-alias-ips -n "$NETWORK" --clear $NODE
                RET=$?
                # delay to avoid sending request too fast
                sleep ${OCF_RESKEY_api_delay}
            else
                $HCBIN server change-alias-ips -n "$NETWORK" --alias-ips ${NEW_ALIAS_IPS_NODE%?} $NODE
                RET=$?
                # delay to avoid sending request too fast
                sleep ${OCF_RESKEY_api_delay}
            fi

            if [ $RET -ne 0 ]; then
                return $OCF_ERR_GENERIC
            fi

            ocf_log info "alias_ip $ALIAS_IP has been successfully brought down on $NODE"
            return $OCF_SUCCESS
        fi
    done
}

case $__OCF_ACTION in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
esac

HCBIN="${OCF_RESKEY_hcbin}"
ALIAS_IP="${OCF_RESKEY_alias_ip}"
NETWORK="${OCF_RESKEY_network}"

case $__OCF_ACTION in
    start)
        hcalias_validate
        hcalias_start
        ;;
    stop)
        hcalias_stop
        ;;
    monitor)
        hcalias_monitor
        ;;
    migrate_to)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	hcalias_stop
        ;;
    migrate_from)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
        hcalias_start
        ;;
    reload)
        ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
        ;;
    validate|validate-all)
        hcalias_validate
        ;;
    usage|help)
        hcalias_usage
        exit $OCF_SUCCESS
        ;;
    *)
        hcalias_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
