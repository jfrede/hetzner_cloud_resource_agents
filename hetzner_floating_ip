#!/bin/sh
#
#
#  Manage Hetzner Cloud floating IP with Pacemaker
#
#
# Copyright 2021 Joerg Frede <frede@b1-systems.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

#
#  Prerequisites:
#
#  - preconfigured hcloud (registerd api Key)
#  - Hetzner Cloud role with the following permissions:
#    * read
#    * write
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

#
# Defaults
#
OCF_RESKEY_hcbin_default="/usr/local/bin/hcloud"
OCF_RESKEY_api_delay_default="1"

: ${OCF_RESKEY_hcbin=${OCF_RESKEY_hcbin_default}}
: ${OCF_RESKEY_api_delay=${OCF_RESKEY_api_delay_default}}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="hetzner_floating_ip">
<version>1.0</version>

<longdesc lang="en">
Resource Agent for Hetzner Cloud Floating IP Addresses.

It manages Hetzner Cloud Floating Addresses with hcloud.

Credentials needs to be setup by running "hcloud context create [project]".

See https://github.com/hetznercloud/cli for more information about hcloud.
</longdesc>
<shortdesc lang="en">Hetzner Cloud Floating IP Address Resource Agent</shortdesc>

<parameters>

<parameter name="hcbin" unique="0">
<longdesc lang="en">
Path to hcloud binary
</longdesc>
<shortdesc lang="en">hcloud binary</shortdesc>
<content type="string" default="${OCF_RESKEY_hcbin_default}" />
</parameter>

<parameter name="floating_ip" unique="1" required="1">
<longdesc lang="en">
The IP Adress that will be floatinged to a host on an internal Network
</longdesc>
<shortdesc lang="en">Floating ip in the specified network</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="api_delay" unique="0">
<longdesc lang="en">
a short delay between API calls, to avoid sending API too quick
</longdesc>
<shortdesc lang="en">a short delay between API calls</shortdesc>
<content type="integer" default="${OCF_RESKEY_api_delay_default}" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="60s" />
<action name="stop"         timeout="30s" />
<action name="monitor"      timeout="30s" interval="3600s" depth="0" />
<action name="migrate_to"   timeout="60s" />
<action name="migrate_from" timeout="30s" />
<action name="meta-data"    timeout="5s" />
<action name="validate-all" timeout="30s" />
</actions>
</resource-agent>
END
}

#######################################################################

hcfloating_usage() {
    cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

hcfloating_start() {
    hcfloating_monitor && return $OCF_SUCCESS

    FLOATING_IP_ID=$(echo "$HCBINOUT" | cut -d " " -f 1)

    $HCBIN floating-ip assign $FLOATING_IP_ID $(hostname -f)
    RET=$?

    if [ $RET -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi

    ocf_log info "floating_ip has been successfully brought up (${FLOATING_IP})"
    return $OCF_SUCCESS
}

hcfloating_stop() {
    hcfloating_monitor || return $OCF_SUCCESS

    FLOATING_IP_ID=$(echo "$HCBINOUT" | cut -d " " -f 1)

    $HCBIN floating-ip unassign $FLOATING_IP_ID
    RET=$?

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay}

    if [ $RET -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi

    ocf_log info "floating_ip has been successfully brought down (${FLOATING_IP})"
    return $OCF_SUCCESS
}

hcfloating_monitor() {
    HCBINOUT=$($HCBIN floating-ip list | grep " ${FLOATING_IP} ")

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay}

    if [ -z "$HCBINOUT" ] ; then
        ocf_exit_reason "Floating IP not found or hcloud not configured"
        return $OCF_ERR_CONFIGURED
    fi 

    echo "$HCBINOUT" | grep -q " $(hostname -f) "
    RET=$?

    if [ $RET -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    return $OCF_SUCCESS
}

hcfloating_validate() {
    check_binary ${HCBIN}

    if [ -z "$FLOATING_IP" ]; then
        ocf_exit_reason "floating_ip parameter not set"
        return $OCF_ERR_CONFIGURED
    fi

    HCBINOUT=$($HCBIN floating-ip list | grep " ${FLOATING_IP} ")

    # delay to avoid sending request too fast
    sleep ${OCF_RESKEY_api_delay}

    if [ -z "$HCBINOUT" ] ; then
        ocf_exit_reason "Floating IP not found or hcloud not configured"
        return $OCF_ERR_CONFIGURED
    fi

    return $OCF_SUCCESS
}

case $__OCF_ACTION in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
esac

HCBIN="${OCF_RESKEY_hcbin}"
FLOATING_IP="${OCF_RESKEY_floating_ip}"

case $__OCF_ACTION in
    start)
        hcfloating_validate
        hcfloating_start
        ;;
    stop)
        hcfloating_stop
        ;;
    monitor)
        hcfloating_monitor
        ;;
    migrate_to)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	hcfloating_stop
        ;;
    migrate_from)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
        hcfloating_start
        ;;
    reload)
        ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
        ;;
    validate|validate-all)
        hcfloating_validate
        ;;
    usage|help)
        hcfloating_usage
        exit $OCF_SUCCESS
        ;;
    *)
        hcfloating_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
